import React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, Heart, Calendar, MapPin } from 'lucide-react';
import { collection, getDocs, addDoc } from 'firebase/firestore';
import { db } from '../firebase/config';

interface Memory {
  id: string;
  title: string;
  date: string;
  description: string;
  location?: string;
  imageUrl: string;
  createdAt: Date;
}

interface MemoryTimelineProps {
  onNext: () => void;
}

const MemoryTimeline: React.FC<MemoryTimelineProps> = ({ onNext }) => {
  const [currentMemory, setCurrentMemory] = useState(0);
  const [showContent, setShowContent] = useState(false);
  const [memories, setMemories] = useState<Memory[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // D·ªØ li·ªáu m·∫∑c ƒë·ªãnh ƒë·ªÉ hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
  const fallbackMemories: Memory[] = [
    {
      id: '1',
      title: "L·∫ßn ƒë·∫ßu g·∫∑p nhau",
      date: "15/03/2023",
      description: "Kho·∫£nh kh·∫Øc ƒë·∫ßu ti√™n anh nh√¨n th·∫•y em, tim anh ƒë√£ bi·∫øt ngay ƒë√≥ l√† ƒë·ªãnh m·ªánh. Em m·∫∑c chi·∫øc v√°y tr·∫Øng, n·ª• c∆∞·ªùi t·ªèa s√°ng nh∆∞ √°nh n·∫Øng ban mai...",
      location: "Qu√°n c√† ph√™ nh·ªè",
      imageUrl: "https://images.pexels.com/photos/2363825/pexels-photo-2363825.jpeg?auto=compress&cs=tinysrgb&w=800",
      createdAt: new Date()
    },
    {
      id: '2',
      title: "Tin nh·∫Øn ƒë·∫ßu ti√™n",
      date: "18/03/2023",
      description: "Anh run run g√µ t·ª´ng ch·ªØ, s·ª£ em s·∫Ω kh√¥ng tr·∫£ l·ªùi. Nh∆∞ng em ƒë√£ tr·∫£ l·ªùi, v√† tr√°i tim anh nh∆∞ ƒë∆∞·ª£c th·∫Øp s√°ng. T·ª´ ƒë√≥, m·ªói tin nh·∫Øn ƒë·ªÅu l√† m·ªôt m√≥n qu√† qu√Ω gi√°...",
      imageUrl: "https://images.pexels.com/photos/1262971/pexels-photo-1262971.jpeg?auto=compress&cs=tinysrgb&w=800",
      createdAt: new Date()
    },
    {
      id: '3',
      title: "Bu·ªïi h·∫πn ƒë·∫ßu ti√™n",
      date: "25/03/2023",
      description: "Ch√∫ng ta c√πng ƒëi xem phim, anh th·∫≠m ch√≠ kh√¥ng nh·ªõ phim g√¨ v√¨ ch·ªâ chƒÉm ch√∫ nh√¨n n·ª• c∆∞·ªùi c·ªßa em. Kho·∫£nh kh·∫Øc ƒë√≥, anh bi·∫øt m√¨nh ƒë√£ y√™u em t·ª´ l√¢u r·ªìi...",
      location: "R·∫°p chi·∫øu phim",
      imageUrl: "https://images.pexels.com/photos/7991579/pexels-photo-7991579.jpeg?auto=compress&cs=tinysrgb&w=800",
      createdAt: new Date()
    },
    {
      id: '4',
      title: "L·∫ßn ƒë·∫ßu n·∫Øm tay",
      date: "02/04/2023",
      description: "Khi anh n·∫Øm l·∫•y tay em, c·∫£ th·∫ø gi·ªõi nh∆∞ ng·ª´ng l·∫°i. ·∫§m √°p v√† ho√†n h·∫£o. Em kh√¥ng r√∫t tay ra, v√† anh bi·∫øt ƒë√≥ l√† d·∫•u hi·ªáu c·ªßa t√¨nh y√™u...",
      location: "C√¥ng vi√™n",
      imageUrl: "https://images.pexels.com/photos/1024993/pexels-photo-1024993.jpeg?auto=compress&cs=tinysrgb&w=800",
      createdAt: new Date()
    },
    {
      id: '5',
      title: "K·ª∑ ni·ªám ƒë·∫∑c bi·ªát",
      date: "20/05/2023",
      description: "Ng√†y ch√∫ng ta c√πng xem ho√†ng h√¥n, em n√≥i r·∫±ng em mu·ªën c√≥ th√™m nhi·ªÅu kho·∫£nh kh·∫Øc nh∆∞ th·∫ø n√†y. Anh h·ª©a s·∫Ω t·∫°o ra v√¥ v√†n kho·∫£nh kh·∫Øc ƒë·∫πp cho em...",
      location: "B√£i bi·ªÉn",
      imageUrl: "https://images.pexels.com/photos/1416736/pexels-photo-1416736.jpeg?auto=compress&cs=tinysrgb&w=800",
      createdAt: new Date()
    }
  ];

  useEffect(() => {
    setShowContent(true);
    
    // Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫∑c ƒë·ªãnh ngay l·∫≠p t·ª©c
    setMemories(fallbackMemories);
    setLoading(false);
    
    // Sau ƒë√≥ th·ª≠ load t·ª´ Firebase trong background
    loadMemoriesFromFirebase();
  }, []);

  const loadMemoriesFromFirebase = async () => {
    try {
      console.log('üîÑ B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu t·ª´ Firebase...');
      
      // Timeout 5 gi√¢y
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 5000)
      );
      
      const firebasePromise = getDocs(collection(db, 'memories'));
      
      const querySnapshot = await Promise.race([firebasePromise, timeoutPromise]) as any;
      console.log('‚úÖ L·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Firestore:', querySnapshot.size, 'documents');
      
      if (querySnapshot.size === 0) {
        console.log('üì≠ Firestore tr·ªëng, t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh...');
        await createDefaultMemories();
        return;
      }
      
      const memoriesData = querySnapshot.docs.map((doc: any) => {
        const data = doc.data();
        return {
          id: doc.id,
          ...data,
          createdAt: data.createdAt?.toDate() || new Date()
        };
      }) as Memory[];
      
      // S·∫Øp x·∫øp theo ng√†y t·∫°o m·ªõi nh·∫•t
      const sortedMemories = memoriesData.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
      setMemories(sortedMemories);
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t v·ªõi d·ªØ li·ªáu t·ª´ Firebase:', sortedMemories.length, 'k·ª∑ ni·ªám');
      
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Firebase:', error);
      // Gi·ªØ nguy√™n d·ªØ li·ªáu m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
      console.log('üîÑ Gi·ªØ nguy√™n d·ªØ li·ªáu m·∫∑c ƒë·ªãnh');
    }
  };

  const createDefaultMemories = async () => {
    try {
      console.log('üîÑ T·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh trong Firebase...');
      
      const defaultMemories = [
        {
          id: 'default-1',
          title: "L·∫ßn ƒë·∫ßu g·∫∑p nhau",
          date: "2024-01-15",
          description: "Kho·∫£nh kh·∫Øc ƒë·∫ßu ti√™n anh nh√¨n th·∫•y em, tim anh ƒë√£ bi·∫øt ngay ƒë√≥ l√† ƒë·ªãnh m·ªánh. Em m·∫∑c chi·∫øc v√°y tr·∫Øng, n·ª• c∆∞·ªùi t·ªèa s√°ng nh∆∞ √°nh n·∫Øng ban mai...",
          location: "Qu√°n c√† ph√™ nh·ªè",
          imageUrl: "https://images.pexels.com/photos/2363825/pexels-photo-2363825.jpeg?auto=compress&cs=tinysrgb&w=800",
          createdAt: new Date()
        },
        {
          id: 'default-2',
          title: "Tin nh·∫Øn ƒë·∫ßu ti√™n",
          date: "2024-01-18",
          description: "Anh run run g√µ t·ª´ng ch·ªØ, s·ª£ em s·∫Ω kh√¥ng tr·∫£ l·ªùi. Nh∆∞ng em ƒë√£ tr·∫£ l·ªùi, v√† tr√°i tim anh nh∆∞ ƒë∆∞·ª£c th·∫Øp s√°ng. T·ª´ ƒë√≥, m·ªói tin nh·∫Øn ƒë·ªÅu l√† m·ªôt m√≥n qu√† qu√Ω gi√°...",
          imageUrl: "https://images.pexels.com/photos/1262971/pexels-photo-1262971.jpeg?auto=compress&cs=tinysrgb&w=800",
          createdAt: new Date()
        },
        {
          id: 'default-3',
          title: "Bu·ªïi h·∫πn ƒë·∫ßu ti√™n",
          date: "2024-01-25",
          description: "Ch√∫ng ta c√πng ƒëi xem phim, anh th·∫≠m ch√≠ kh√¥ng nh·ªõ phim g√¨ v√¨ ch·ªâ chƒÉm ch√∫ nh√¨n n·ª• c∆∞·ªùi c·ªßa em. Kho·∫£nh kh·∫Øc ƒë√≥, anh bi·∫øt m√¨nh ƒë√£ y√™u em t·ª´ l√¢u r·ªìi...",
          location: "R·∫°p chi·∫øu phim",
          imageUrl: "https://images.pexels.com/photos/7991579/pexels-photo-7991579.jpeg?auto=compress&cs=tinysrgb&w=800",
          createdAt: new Date()
        },
        {
          id: 'default-4',
          title: "L·∫ßn ƒë·∫ßu n·∫Øm tay",
          date: "2024-02-02",
          description: "Khi anh n·∫Øm l·∫•y tay em, c·∫£ th·∫ø gi·ªõi nh∆∞ ng·ª´ng l·∫°i. ·∫§m √°p v√† ho√†n h·∫£o. Em kh√¥ng r√∫t tay ra, v√† anh bi·∫øt ƒë√≥ l√† d·∫•u hi·ªáu c·ªßa t√¨nh y√™u...",
          location: "C√¥ng vi√™n",
          imageUrl: "https://images.pexels.com/photos/1024993/pexels-photo-1024993.jpeg?auto=compress&cs=tinysrgb&w=800",
          createdAt: new Date()
        },
        {
          id: 'default-5',
          title: "K·ª∑ ni·ªám ƒë·∫∑c bi·ªát",
          date: "2024-02-20",
          description: "Ng√†y ch√∫ng ta c√πng xem ho√†ng h√¥n, em n√≥i r·∫±ng em mu·ªën c√≥ th√™m nhi·ªÅu kho·∫£nh kh·∫Øc nh∆∞ th·∫ø n√†y. Anh h·ª©a s·∫Ω t·∫°o ra v√¥ v√†n kho·∫£nh kh·∫Øc ƒë·∫πp cho em...",
          location: "B√£i bi·ªÉn",
          imageUrl: "https://images.pexels.com/photos/1416736/pexels-photo-1416736.jpeg?auto=compress&cs=tinysrgb&w=800",
          createdAt: new Date()
        }
      ];

      const addPromises = defaultMemories.map(memory => 
        addDoc(collection(db, 'memories'), memory)
      );
      
      await Promise.all(addPromises);
      console.log('‚úÖ ƒê√£ t·∫°o', defaultMemories.length, 'k·ª∑ ni·ªám m·∫∑c ƒë·ªãnh trong Firebase');
      
      // C·∫≠p nh·∫≠t UI v·ªõi d·ªØ li·ªáu m·ªõi
      setMemories(defaultMemories);
      
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh:', error);
      // Gi·ªØ nguy√™n d·ªØ li·ªáu m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
    }
  };

  const nextMemory = () => {
    if (currentMemory < memories.length - 1) {
      setCurrentMemory(currentMemory + 1);
    }
  };

  const prevMemory = () => {
    if (currentMemory > 0) {
      setCurrentMemory(currentMemory - 1);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-pink-500 mx-auto mb-4"></div>
          <p className="text-pink-600">ƒêang t·∫£i k·ª∑ ni·ªám...</p>
          {error && (
            <p className="text-red-500 text-sm mt-2">L·ªói: {error}</p>
          )}
        </div>
      </div>
    );
  }

  if (memories.length === 0) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center px-4 py-8">
        <div className="text-center">
          <Heart className="w-16 h-16 text-pink-400 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Ch∆∞a c√≥ k·ª∑ ni·ªám n√†o</h2>
          <p className="text-gray-600 mb-8">H√£y th√™m nh·ªØng k·ª∑ ni·ªám ƒë·∫πp c·ªßa ch√∫ng ta</p>
          <button
            onClick={onNext}
            className="bg-gradient-to-r from-pink-400 to-purple-500 text-white px-6 py-3 rounded-full hover:shadow-lg transition-all duration-300"
          >
            Ti·∫øp t·ª•c
          </button>
        </div>
      </div>
    );
  }

  const currentMem = memories[currentMemory];

  return (
    <div className="min-h-screen flex flex-col items-center justify-center px-4 py-8 relative">
      {/* Title */}
      <div className={`text-center mb-12 transition-all duration-1000 ${showContent ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}>
        <h2 
          className="text-5xl md:text-6xl font-bold bg-gradient-to-r from-pink-500 to-purple-600 bg-clip-text text-transparent mb-4"
          style={{ fontFamily: 'Times New Roman, serif' }}
        >
          H√†nh Tr√¨nh C·ªßa Ch√∫ng Ta
        </h2>
        <p className="text-pink-600 text-lg opacity-80">
          T·ª´ng k·ª∑ ni·ªám ƒë·∫πp m√† anh mu·ªën gi·ªØ m√£i b√™n em...
        </p>
      </div>

      {/* Memory Card */}
      <div className={`max-w-4xl w-full transition-all duration-1000 delay-300 ${showContent ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}>
        <div className="bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl p-8 md:p-12 hover:shadow-pink-200/50 transition-all duration-500 relative overflow-hidden">
          {/* Background Decoration */}
          <div className="absolute top-0 right-0 w-40 h-40 bg-gradient-to-bl from-pink-200/30 to-transparent rounded-full -translate-y-20 translate-x-20" />
          
          <div className="grid md:grid-cols-2 gap-8 items-center">
            {/* Image */}
            <div className="relative group">
              <div className="aspect-square rounded-2xl overflow-hidden shadow-xl transform group-hover:rotate-2 transition-transform duration-500">
                <img 
                  src={currentMem.imageUrl} 
                  alt={currentMem.title}
                  className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-700"
                  onError={(e) => {
                    console.error('‚ùå L·ªói t·∫£i ·∫£nh:', currentMem.imageUrl);
                    e.currentTarget.src = 'https://via.placeholder.com/400x400/pink/white?text=·∫¢nh+kh√¥ng+t·∫£i+ƒë∆∞·ª£c';
                  }}
                />
              </div>
              {/* Polaroid Effect */}
              <div className="absolute -bottom-2 -right-2 w-full h-full bg-white rounded-2xl shadow-lg -z-10 transform rotate-3" />
              <div className="absolute -bottom-4 -right-4 w-full h-full bg-pink-100 rounded-2xl shadow-md -z-20 transform rotate-6" />
            </div>

            {/* Content */}
            <div className="space-y-6">
              <div className="flex items-center text-pink-500 space-x-3">
                <Calendar className="w-5 h-5" />
                <span className="font-medium">{currentMem.date}</span>
              </div>
              
              <h3 
                className="text-3xl md:text-4xl font-bold text-gray-800 leading-tight"
                style={{ fontFamily: 'Times New Roman, serif' }}
              >
                {currentMem.title}
              </h3>
              
              {currentMem.location && (
                <div className="flex items-center text-purple-500 space-x-2">
                  <MapPin className="w-4 h-4" />
                  <span className="text-sm font-medium">{currentMem.location}</span>
                </div>
              )}
              
              <p className="text-gray-700 text-lg leading-relaxed">
                {currentMem.description}
              </p>
              
              <div className="flex items-center space-x-2 pt-4">
                {Array.from({ length: 3 }).map((_, i) => (
                  <Heart 
                    key={i} 
                    className="w-4 h-4 text-pink-400 animate-pulse" 
                    style={{ animationDelay: `${i * 0.5}s` }}
                  />
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="flex items-center justify-between w-full max-w-4xl mt-8">
        <button
          onClick={prevMemory}
          disabled={currentMemory === 0}
          className="flex items-center space-x-2 px-6 py-3 bg-white/70 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-pink-50"
        >
          <ChevronLeft className="w-5 h-5" />
          <span>Tr∆∞·ªõc</span>
        </button>

        {/* Memory Indicators */}
        <div className="flex space-x-2">
          {memories.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentMemory(index)}
              className={`w-3 h-3 rounded-full transition-all duration-300 ${
                index === currentMemory 
                  ? 'bg-pink-500 scale-125' 
                  : 'bg-pink-200 hover:bg-pink-300'
              }`}
            />
          ))}
        </div>

        <button
          onClick={currentMemory === memories.length - 1 ? onNext : nextMemory}
          className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-pink-400 to-purple-500 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105"
        >
          <span>{currentMemory === memories.length - 1 ? 'Ti·∫øp t·ª•c' : 'Sau'}</span>
          <ChevronRight className="w-5 h-5" />
        </button>
      </div>
    </div>
  );
};

export default MemoryTimeline;