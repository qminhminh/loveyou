import React, { useState, useEffect } from 'react';
import { Upload, X, Image as ImageIcon, Calendar, MapPin, Heart, Save, Trash2, Home } from 'lucide-react';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { collection, addDoc, getDocs, deleteDoc, doc } from 'firebase/firestore';
import { storage, db } from '../firebase/config';
import { useNavigate } from 'react-router-dom';

interface Memory {
  id: string;
  title: string;
  date: string;
  description: string;
  location?: string;
  imageUrl: string;
  createdAt: Date;
}

const AdminPanel: React.FC = () => {
  const [memories, setMemories] = useState<Memory[]>([]);
  const [isUploading, setIsUploading] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string>('');
  const [formData, setFormData] = useState({
    title: '',
    date: '',
    description: '',
    location: ''
  });

  const navigate = useNavigate();

  useEffect(() => {
    loadMemories();
  }, []);

  const loadMemories = async () => {
    try {
      console.log('üîÑ AdminPanel: B·∫Øt ƒë·∫ßu t·∫£i danh s√°ch k·ª∑ ni·ªám...');
      const querySnapshot = await getDocs(collection(db, 'memories'));
      console.log('‚úÖ AdminPanel: L·∫•y ƒë∆∞·ª£c', querySnapshot.size, 'documents t·ª´ Firestore');
      
      if (querySnapshot.size === 0) {
        console.log('üì≠ AdminPanel: Firestore tr·ªëng, t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh...');
        await createDefaultMemories();
        return; // loadMemories s·∫Ω ƒë∆∞·ª£c g·ªçi l·∫°i t·ª´ createDefaultMemories
      }
      
      const memoriesData = querySnapshot.docs.map(doc => {
        const data = doc.data();
        console.log('üìÑ AdminPanel: Document data:', data);
        return {
          id: doc.id,
          ...data,
          createdAt: data.createdAt?.toDate() || new Date()
        };
      }) as Memory[];
      
      console.log('üéØ AdminPanel: Memories ƒë√£ x·ª≠ l√Ω:', memoriesData);
      setMemories(memoriesData.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime()));
      console.log('‚úÖ AdminPanel: ƒê√£ c·∫≠p nh·∫≠t state v·ªõi', memoriesData.length, 'k·ª∑ ni·ªám');
    } catch (error) {
      console.error('‚ùå AdminPanel: L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
      alert('C√≥ l·ªói khi t·∫£i danh s√°ch k·ª∑ ni·ªám: ' + (error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
    }
  };

  const createDefaultMemories = async () => {
    console.log('üîÑ AdminPanel: T·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh...');
    
    const defaultMemories = [
      {
        title: "L·∫ßn ƒë·∫ßu g·∫∑p nhau",
        date: "2024-01-15",
        description: "Kho·∫£nh kh·∫Øc ƒë·∫ßu ti√™n anh nh√¨n th·∫•y em, tim anh ƒë√£ bi·∫øt ngay ƒë√≥ l√† ƒë·ªãnh m·ªánh. Em m·∫∑c chi·∫øc v√°y tr·∫Øng, n·ª• c∆∞·ªùi t·ªèa s√°ng nh∆∞ √°nh n·∫Øng ban mai...",
        location: "Qu√°n c√† ph√™ nh·ªè",
        imageUrl: "https://images.pexels.com/photos/2363825/pexels-photo-2363825.jpeg?auto=compress&cs=tinysrgb&w=800",
        createdAt: new Date()
      },
      {
        title: "Tin nh·∫Øn ƒë·∫ßu ti√™n",
        date: "2024-01-18",
        description: "Anh run run g√µ t·ª´ng ch·ªØ, s·ª£ em s·∫Ω kh√¥ng tr·∫£ l·ªùi. Nh∆∞ng em ƒë√£ tr·∫£ l·ªùi, v√† tr√°i tim anh nh∆∞ ƒë∆∞·ª£c th·∫Øp s√°ng. T·ª´ ƒë√≥, m·ªói tin nh·∫Øn ƒë·ªÅu l√† m·ªôt m√≥n qu√† qu√Ω gi√°...",
        imageUrl: "https://images.pexels.com/photos/1262971/pexels-photo-1262971.jpeg?auto=compress&cs=tinysrgb&w=800",
        createdAt: new Date()
      },
      {
        title: "Bu·ªïi h·∫πn ƒë·∫ßu ti√™n",
        date: "2024-01-25",
        description: "Ch√∫ng ta c√πng ƒëi xem phim, anh th·∫≠m ch√≠ kh√¥ng nh·ªõ phim g√¨ v√¨ ch·ªâ chƒÉm ch√∫ nh√¨n n·ª• c∆∞·ªùi c·ªßa em. Kho·∫£nh kh·∫Øc ƒë√≥, anh bi·∫øt m√¨nh ƒë√£ y√™u em t·ª´ l√¢u r·ªìi...",
        location: "R·∫°p chi·∫øu phim",
        imageUrl: "https://images.pexels.com/photos/7991579/pexels-photo-7991579.jpeg?auto=compress&cs=tinysrgb&w=800",
        createdAt: new Date()
      },
      {
        title: "L·∫ßn ƒë·∫ßu n·∫Øm tay",
        date: "2024-02-02",
        description: "Khi anh n·∫Øm l·∫•y tay em, c·∫£ th·∫ø gi·ªõi nh∆∞ ng·ª´ng l·∫°i. ·∫§m √°p v√† ho√†n h·∫£o. Em kh√¥ng r√∫t tay ra, v√† anh bi·∫øt ƒë√≥ l√† d·∫•u hi·ªáu c·ªßa t√¨nh y√™u...",
        location: "C√¥ng vi√™n",
        imageUrl: "https://images.pexels.com/photos/1024993/pexels-photo-1024993.jpeg?auto=compress&cs=tinysrgb&w=800",
        createdAt: new Date()
      },
      {
        title: "K·ª∑ ni·ªám ƒë·∫∑c bi·ªát",
        date: "2024-02-20",
        description: "Ng√†y ch√∫ng ta c√πng xem ho√†ng h√¥n, em n√≥i r·∫±ng em mu·ªën c√≥ th√™m nhi·ªÅu kho·∫£nh kh·∫Øc nh∆∞ th·∫ø n√†y. Anh h·ª©a s·∫Ω t·∫°o ra v√¥ v√†n kho·∫£nh kh·∫Øc ƒë·∫πp cho em...",
        location: "B√£i bi·ªÉn",
        imageUrl: "https://images.pexels.com/photos/1416736/pexels-photo-1416736.jpeg?auto=compress&cs=tinysrgb&w=800",
        createdAt: new Date()
      }
    ];

    try {
      const addPromises = defaultMemories.map(memory => 
        addDoc(collection(db, 'memories'), memory)
      );
      
      await Promise.all(addPromises);
      console.log('‚úÖ AdminPanel: ƒê√£ t·∫°o', defaultMemories.length, 'k·ª∑ ni·ªám m·∫∑c ƒë·ªãnh');
      
      // Load l·∫°i d·ªØ li·ªáu sau khi t·∫°o
      await loadMemories();
      
    } catch (error) {
      console.error('‚ùå AdminPanel: L·ªói khi t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh:', error);
      alert('Kh√¥ng th·ªÉ t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh: ' + (error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
    }
  };

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      const url = URL.createObjectURL(file);
      setPreviewUrl(url);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile || !formData.title || !formData.description) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√† ch·ªçn ·∫£nh!');
      return;
    }

    setIsUploading(true);
    try {
      // Upload ·∫£nh l√™n Firebase Storage
      const storageRef = ref(storage, `memories/${Date.now()}_${selectedFile.name}`);
      const snapshot = await uploadBytes(storageRef, selectedFile);
      const downloadURL = await getDownloadURL(snapshot.ref);

      // L∆∞u th√¥ng tin v√†o Firestore
      const memoryData = {
        title: formData.title,
        date: formData.date,
        description: formData.description,
        location: formData.location || '',
        imageUrl: downloadURL,
        createdAt: new Date()
      };

      await addDoc(collection(db, 'memories'), memoryData);

      // Reset form
      setSelectedFile(null);
      setPreviewUrl('');
      setFormData({
        title: '',
        date: '',
        description: '',
        location: ''
      });

      // Reload danh s√°ch
      await loadMemories();
      alert('Upload th√†nh c√¥ng!');
    } catch (error) {
      console.error('L·ªói khi upload:', error);
      alert('C√≥ l·ªói x·∫£y ra khi upload!');
    } finally {
      setIsUploading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a k·ª∑ ni·ªám n√†y?')) {
      try {
        await deleteDoc(doc(db, 'memories', id));
        await loadMemories();
        alert('ƒê√£ x√≥a th√†nh c√¥ng!');
      } catch (error) {
        console.error('L·ªói khi x√≥a:', error);
        alert('C√≥ l·ªói x·∫£y ra khi x√≥a!');
      }
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-pink-50 p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12 relative">
          {/* N√∫t v·ªÅ trang ch√≠nh */}
          <button
            onClick={() => navigate('/')}
            className="absolute top-0 left-0 flex items-center space-x-2 px-4 py-2 bg-white/70 backdrop-blur-sm rounded-full shadow-lg hover:shadow-xl transition-all duration-300 hover:bg-pink-50"
          >
            <Home className="w-4 h-4 text-pink-500" />
            <span className="text-pink-600 font-medium">V·ªÅ trang ch√≠nh</span>
          </button>

          <h1 className="text-4xl font-bold bg-gradient-to-r from-pink-500 to-purple-600 bg-clip-text text-transparent mb-4">
            Admin Panel - Qu·∫£n L√Ω K·ª∑ Ni·ªám
          </h1>
          <p className="text-pink-600 text-lg">
            Th√™m v√† qu·∫£n l√Ω nh·ªØng k·ª∑ ni·ªám ƒë·∫πp c·ªßa ch√∫ng ta
          </p>
        </div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Upload Form */}
          <div className="bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl p-8">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center">
              <Upload className="w-6 h-6 mr-2 text-pink-500" />
              Th√™m K·ª∑ Ni·ªám M·ªõi
            </h2>

            {/* File Upload */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Ch·ªçn ·∫£nh
              </label>
              <div className="border-2 border-dashed border-pink-300 rounded-lg p-6 text-center hover:border-pink-400 transition-colors">
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleFileSelect}
                  className="hidden"
                  id="file-upload"
                />
                <label htmlFor="file-upload" className="cursor-pointer">
                  {previewUrl ? (
                    <div className="relative">
                      <img
                        src={previewUrl}
                        alt="Preview"
                        className="max-h-48 mx-auto rounded-lg shadow-md"
                      />
                      <button
                        onClick={() => {
                          setSelectedFile(null);
                          setPreviewUrl('');
                        }}
                        className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  ) : (
                    <div>
                      <ImageIcon className="w-12 h-12 mx-auto text-pink-400 mb-2" />
                      <p className="text-gray-600">Click ƒë·ªÉ ch·ªçn ·∫£nh</p>
                    </div>
                  )}
                </label>
              </div>
            </div>

            {/* Form Fields */}
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ti√™u ƒë·ªÅ
                </label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => setFormData({...formData, title: e.target.value})}
                  className="w-full px-4 py-2 border border-pink-200 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ k·ª∑ ni·ªám..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ng√†y th√°ng
                </label>
                <input
                  type="date"
                  value={formData.date}
                  onChange={(e) => setFormData({...formData, date: e.target.value})}
                  className="w-full px-4 py-2 border border-pink-200 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ƒê·ªãa ƒëi·ªÉm (t√πy ch·ªçn)
                </label>
                <input
                  type="text"
                  value={formData.location}
                  onChange={(e) => setFormData({...formData, location: e.target.value})}
                  className="w-full px-4 py-2 border border-pink-200 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="Nh·∫≠p ƒë·ªãa ƒëi·ªÉm..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M√¥ t·∫£
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  rows={4}
                  className="w-full px-4 py-2 border border-pink-200 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="M√¥ t·∫£ k·ª∑ ni·ªám n√†y..."
                />
              </div>

              <button
                onClick={handleUpload}
                disabled={isUploading || !selectedFile}
                className="w-full bg-gradient-to-r from-pink-400 to-purple-500 text-white py-3 rounded-lg font-medium hover:shadow-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
              >
                {isUploading ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                    ƒêang upload...
                  </>
                ) : (
                  <>
                    <Save className="w-5 h-5 mr-2" />
                    L∆∞u K·ª∑ Ni·ªám
                  </>
                )}
              </button>
            </div>
          </div>

          {/* Memories List */}
          <div className="bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl p-8">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center">
              <Heart className="w-6 h-6 mr-2 text-pink-500" />
              Danh S√°ch K·ª∑ Ni·ªám ({memories.length})
            </h2>

            <div className="space-y-4 max-h-96 overflow-y-auto">
              {memories.map((memory) => (
                <div key={memory.id} className="bg-pink-50 rounded-lg p-4 border border-pink-200">
                  <div className="flex items-start space-x-3">
                    <img
                      src={memory.imageUrl}
                      alt={memory.title}
                      className="w-16 h-16 object-cover rounded-lg"
                    />
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-800">{memory.title}</h3>
                      <div className="flex items-center text-sm text-pink-600 space-x-4 mt-1">
                        <span className="flex items-center">
                          <Calendar className="w-3 h-3 mr-1" />
                          {memory.date}
                        </span>
                        {memory.location && (
                          <span className="flex items-center">
                            <MapPin className="w-3 h-3 mr-1" />
                            {memory.location}
                          </span>
                        )}
                      </div>
                      <p className="text-sm text-gray-600 mt-2 line-clamp-2">
                        {memory.description}
                      </p>
                    </div>
                    <button
                      onClick={() => handleDelete(memory.id)}
                      className="text-red-500 hover:text-red-700 p-1"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              ))}
              
              {memories.length === 0 && (
                <div className="text-center text-gray-500 py-8">
                  <Heart className="w-12 h-12 mx-auto text-pink-300 mb-2" />
                  <p>Ch∆∞a c√≥ k·ª∑ ni·ªám n√†o ƒë∆∞·ª£c th√™m</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminPanel; 